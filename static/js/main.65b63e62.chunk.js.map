{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["api","App","useState","query","setQuery","weather","setWeather","className","main","description","type","placeholder","onChange","e","target","value","onKeyPress","evt","key","fetch","then","res","json","result","console","log","name","sys","country","d","day","getDay","date","getDate","month","getMonth","year","getFullYear","dateBuilder","Date","Math","round","temp","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sMAGMA,EACA,mCADAA,EAEC,2CA8DQC,MA3Df,WAEE,MAA0BC,mBAAS,KAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAA8BF,mBAAS,IAAvC,mBAAOG,EAAP,KAAgBC,EAAhB,KA0BA,OACE,qBAAKC,UAAoC,qBAAjBF,EAAQG,KAA0D,SAAjCH,EAAQA,QAAQ,GAAGI,YAAuB,WAA6C,SAAjCJ,EAAQA,QAAQ,GAAGI,YAAsB,WAA6C,qBAAjCJ,EAAQA,QAAQ,GAAGI,YAAkC,sBAAwD,kBAAjCJ,EAAQA,QAAQ,GAAGI,YAA+B,mBAAqD,eAAjCJ,EAAQA,QAAQ,GAAGI,YAA6B,gBAAkD,iBAAjCJ,EAAQA,QAAQ,GAAGI,YAA+B,mBAAqD,eAAjCJ,EAAQA,QAAQ,GAAGI,YAA6B,gBAAkD,oBAAjCJ,EAAQA,QAAQ,GAAGI,YAAkC,qBAAqB,WAAY,WAAplB,SAEC,iCACE,qBAAKF,UAAU,aAAf,SACE,uBAAOG,KAAK,OACVH,UAAU,aACVI,YAAY,YACZC,SAAU,SAAAC,GAAC,OAAET,EAASS,EAAEC,OAAOC,QAC/BA,MAAOZ,EACPa,WAlCI,SAAAC,GACI,UAAZA,EAAIC,KACLC,MAAM,GAAD,OAAInB,EAAJ,qBAAyBG,EAAzB,+BAAqDH,IACzDoB,MAAK,SAAAC,GAAG,OAAEA,EAAIC,UACdF,MAAK,SAAAG,GACJjB,EAAWiB,GACXnB,EAAS,IACToB,QAAQC,IAAIF,WA8BY,oBAAhBlB,EAAQG,KACjB,gCACE,sBAAKD,UAAU,eAAf,UACA,sBAAKA,UAAU,WAAf,UAA2BF,EAAQqB,KAAnC,IAA0CrB,EAAQsB,IAAIC,WACtD,qBAAKrB,UAAU,OAAf,SA7BW,SAACsB,GACjB,IAEIC,EADK,CAAC,SAAS,SAAS,UAAU,YAAY,WAAW,SAAS,YACzDD,EAAEE,UACXC,EAAKH,EAAEI,UACPC,EAJO,CAAC,WAAW,WAAW,QAAQ,QAAQ,MAAM,OAAO,OAAO,SAAS,YAAY,UAAU,WAAW,YAI/FL,EAAEM,YACfC,EAAKP,EAAEQ,cAEX,MAAM,GAAN,OAAUP,EAAV,YAAiBE,EAAjB,YAAyBE,EAAzB,YAAkCE,GAqBNE,CAAY,IAAIC,WAEzC,sBAAKhC,UAAU,cAAf,UACE,sBAAKA,UAAU,OAAf,UAAuBiC,KAAKC,MAAMpC,EAAQG,KAAKkC,MAA/C,WACA,qBAAKnC,UAAU,UAAf,SAA0BF,EAAQA,QAAQ,GAAGI,oBAG5C,UCjDKkC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBzB,MAAK,YAAkD,IAA/C0B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.65b63e62.chunk.js","sourcesContent":["import './App.css';\nimport React,{useState} from 'react';\n\nconst api={\n  key:\"b073d84a2ec2e05edbf1c9e80ec04a77\",\n  base:\"https://api.openweathermap.org/data/2.5/\"\n}\n\nfunction App() {\n\n  const [query, setQuery] = useState(' ');\n  const [weather, setWeather] = useState({});\n\n  const search=evt=>{\n    if(evt.key === \"Enter\"){\n      fetch(`${api.base}weather?q=${query}&units=metric&APPID=${api.key}`)\n      .then(res=>res.json())\n      .then(result=>{ \n        setWeather(result);\n        setQuery('');\n        console.log(result);\n      });\n    }\n  }\n  \n  const dateBuilder=(d) => {\n    let months=[\"Janurary\",\"February\",\"March\",\"April\",\"May\",\"June\",\"July\",\"August\",\"September\",\"October\",\"November\",\"December\"];\n    let days=[\"Sunday\",\"Monday\",\"Tuesday\",\"Wednesday\",\"Thursday\",\"Friday\",\"Saturday\"];\n    let day=days[d.getDay()];\n    let date=d.getDate();\n    let month=months[d.getMonth()];\n    let year=d.getFullYear();\n\n    return `${day} ${date} ${month} ${year}`\n  }\n  // <div className={(typeof weather.main != \"undefined\") ? ((weather.main.temp > 16) ? 'app warm' : 'app cold') : 'app cold'\n\n  return (\n    <div className={(typeof weather.main !== \"undefined\") ? (weather.weather[0].description===\"mist\")? 'app mist':(weather.weather[0].description==='haze')?'app haze':(weather.weather[0].description==='scattered clouds')?'app scatteredclouds':(weather.weather[0].description==='broken clouds')?'app brokenclouds':(weather.weather[0].description==='few clouds')? 'app fewclouds':(weather.weather[0].description==='thunderstorm')? 'app thunderstrom':(weather.weather[0].description==='light rain')? 'app lightrain':(weather.weather[0].description==='overcast clouds')? 'app overcastclouds':'app warm': 'app cold'\n    }>\n     <main>\n       <div className=\"search-box\">\n         <input type=\"text\"\n           className=\"search-bar\"\n           placeholder=\"Search...\"\n           onChange={e=>setQuery(e.target.value)}\n           value={query}\n           onKeyPress={search}\n         />\n       </div>\n       {(typeof weather.main != \"undefined\") ? (\n       <div>\n         <div className=\"location-box\">\n         <div className=\"location\">{weather.name},{weather.sys.country}</div>\n         <div className=\"date\">{dateBuilder(new Date())}</div>\n       </div>\n       <div className=\"weather-box\">\n         <div className=\"temp\">{Math.round(weather.main.temp)}Â°C</div>\n         <div className=\"weather\">{weather.weather[0].description}</div>\n       </div>\n       </div>\n       ):(\" \")}\n     </main>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}